apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

group = 'expo.modules.nativewechat'
version = '0.1.0'

def rootProject = getRootProject()
def rootProjectAndroidPath = rootProject.projectDir.toPath()
def appJsonPath = rootProjectAndroidPath.resolve("../app.json")

def jsonFile = file(appJsonPath)
def jsonSlurper = new groovy.json.JsonSlurper()
def jsonData = jsonSlurper.parse(jsonFile)

def packageName = jsonData.expo.android.package + ".wxapi";
def packageDir = packageName.replace('.', '/')


task generateWechatEntryActivity {
  def activityTemplate = '''
package %s;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;

public class WXEntryActivity extends Activity {
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    try {
      Intent intent = getIntent();
      Intent intentToBroadcast = new Intent();

      intentToBroadcast.setAction("com.hector.nativewechat.ACTION_REDIRECT_INTENT");
      intentToBroadcast.putExtra("intent", intent);

      sendBroadcast(intentToBroadcast);

      finish();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
'''

  def baseActivityFolder = new File("${rootProjectAndroidPath}/app/src/main/java/${packageDir}");

  if (!baseActivityFolder.exists()) {
    baseActivityFolder.mkdirs();
  }

  def activityCode = String.format(activityTemplate, packageName)
  def activityFile = new File("${rootProjectAndroidPath}/app/src/main/java/${packageDir}/WXEntryActivity.java")

  activityFile.text = activityCode
}

task generateWechatPayEntryActivity {
  def activityTemplate = '''
package %s;

import android.app.Activity;
import android.os.Bundle;

public class WXPayEntryActivity extends Activity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        finish();
    }
}
'''
  def activityCode = String.format(activityTemplate, packageName)
  def activityFile = new File("${rootProjectAndroidPath}/app/src/main/java/${packageDir}/WXPayEntryActivity.java")

  activityFile.text = activityCode
}

buildscript {
  def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
  if (expoModulesCorePlugin.exists()) {
    apply from: expoModulesCorePlugin
    applyKotlinExpoModulesCorePlugin()
  }

  // Simple helper that allows the root project to override versions declared by this library.
  ext.safeExtGet = { prop, fallback ->
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
  }

  // Ensures backward compatibility
  ext.getKotlinVersion = {
    if (ext.has("kotlinVersion")) {
      ext.kotlinVersion()
    } else {
      ext.safeExtGet("kotlinVersion", "1.8.10")
    }
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${getKotlinVersion()}")
  }
}

android {
  compileSdkVersion safeExtGet("compileSdkVersion", 33)

  def agpVersion = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION
  if (agpVersion.tokenize('.')[0].toInteger() < 8) {
    compileOptions {
      sourceCompatibility JavaVersion.VERSION_11
      targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
      jvmTarget = JavaVersion.VERSION_11.majorVersion
    }
  }

  namespace "expo.modules.nativewechat"
  defaultConfig {
    minSdkVersion safeExtGet("minSdkVersion", 21)
    targetSdkVersion safeExtGet("targetSdkVersion", 34)
    versionCode 1
    versionName "0.1.0"
  }
  lintOptions {
    abortOnError false
  }
  publishing {
    singleVariant("release") {
      withSourcesJar()
    }
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation project(':expo-modules-core')
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}"
  implementation("com.squareup.okhttp3:okhttp:4.12.0")

  api 'com.tencent.mm.opensdk:wechat-sdk-android:+'
}

afterEvaluate {
  preBuild.dependsOn(generateWechatEntryActivity)
  preBuild.dependsOn(generateWechatPayEntryActivity)

  publishing {
    publications {
      release(MavenPublication) {
        from components.release
      }
    }
    repositories {
      maven {
        url = mavenLocal().url
      }
    }
  }
}
